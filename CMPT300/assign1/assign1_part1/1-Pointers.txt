Pointers in C
-------------

1) Consider the following C program.
#include <string.h>
int main(int argc, char *argv[])
{
  char *temp;
  strcpy(temp, argv[0]);
  return 0;
}

Why is the above code incorrect (i.e., likely to crash)?

  A: Firstly, temp is not a string which is a pointer. Seconly, it doesn't point to a string.
So it can't called by strcpy.


2) Consider the following C program.
#include <string.h>
int main(int argc, char *argv[])
{
  char temp[9];
  strcpy(temp, argv[0]);
  return 0;
}

A buffer overflow occurs when the program name is 9 characters long
(e.g., "12345.exe"). Why?

  A: Because the buffer is longer than 9 size, I think it's about
the null char when the null char copy to the temp which run over the length of temp.


3) Consider the following C program.
#include <string.h>
int main(int argc, char *argv[])
{
  char *buffer = "Hello";
  strcpy(buffer, "World");
  return 0;
}

Why does this program crash?
  
  A: Buffer is not a string which is a pointer pointing to a string 
but do not have the address of the string and can't access it.

4) Consider the following C snippet.
void myfunc()
{
  char b[100];
  char *buffer = &b[0];
  strcpy(buffer, "World");
}

Is this correct?  What's a simpler expression for &b[0]?

  A: It's correct, because buffer is a pointer of string
and have the address to access the string. The simpler expression is &b[] 
which will get the first index address of b[].


5) Consider the following C program.
#include <stdio.h>
int main(int argc, char* argv[])
{
  printf("%s %s %s\n", *argv, (*(argv+1)) + 2, *(argv+2));
  return 0;
}

If this code is executed using the following line, what will be the output?
> program1 -n5 abc
 
  A: ./program1 5 abc


6) Consider the following C program.
#include <stdio.h>
#include <string.h>
char *myfunc(char **argv)
{
  char buffer[100];
  strcpy(buffer, "hello");
  return buffer;
}
int main(int argc, char *argv[])
{
  char *s = myfunc(argv);
  printf("%s\n", s);
}

What's wrong with this?

  A: The function is correct and can be complied. But the pointer s is point to a function 
which is the problem. It seems the printf function can't use to print a function.


